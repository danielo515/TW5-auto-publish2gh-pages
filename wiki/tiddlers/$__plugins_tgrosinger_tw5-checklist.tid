author: Tony Grosinger
core-version: >=5.0.9
created: 20180313165324106
dependents: 
description: Checklist Plugin
list: readme Usage Configuration
modified: 20180313165324106
plugin-type: plugin
source: https://github.com/tgrosinger/tw5-checklist
title: $:/plugins/tgrosinger/tw5-checklist
type: application/json
version: 0.0.15

{
    "tiddlers": {
        "$:/plugins/tgrosinger/tw5-checklist/checkbox-wikirule.js": {
            "text": "/*\\\ntitle: $:/plugins/tgrosinger/tw5-checklist/checkbox-wikirule.js\ntype: application/javascript\nmodule-type: wikirule\n\\*/\n\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.name = \"checkbox\";\nexports.types = {inline: true};\n\nexports.init = function(parser) {\n\tthis.parser = parser;\n\n\t// Match on [ ], [x], and [X], to the end of the line\n\tthis.matchRegExp = /^\\[([ xX])\\] .*$/mg;\n};\n\n/*\nRetrieve the configuration state of the clear all button\n*/\n\nexports.shouldShowClearAll = function() {\n    var configWidgetTitle = \"$:/plugins/tgrosinger/tw5-checklist/Configuration\";\n    var configWidgetFields = $tw.wiki.getTiddler(configWidgetTitle).fields;\n\n    var showClearAll = configWidgetFields[\"show-clearall\"] || \"true\";\n    return (showClearAll === \"true\");\n}\n\n/*\nCreate list items\n*/\n\nexports.parse = function() {\n    var listItems = [];\n    var listStartPos = this.parser.pos;\n    var match = this.match;\n\n    // Start the list with a \"New List Item\" placeholder\n    listItems.push({\n        type: \"element\",\n        tag: \"li\",\n        children: [\n            {\n                type: \"element\",\n                tag: \"span\",\n                attributes: {\n                    class: {type: \"string\", value: \"checklist-newitem-icon\"},\n                    for: {type: \"string\", value: \"checklist-new\"}\n                }\n            },\n            {\n                type: \"element\",\n                tag: \"input\",\n                attributes: {\n                    class: {type: \"string\", value: \"checklist-newitem\"},\n                    id: {type: \"string\", value: \"checklist-new\"},\n                    placeholder: {type: \"string\", value: \"New list item (WikiText)\"}\n                    // impossible? add an aria-label \"Write a new todo item\"\n                    // attribute aria-label seems to be missing in $:/core/modules/widgets/edit.js \n                }\n            },\n            // label for the input field\n            {\n                type: \"element\",\n                tag: \"label\",\n                attributes: {\n                    class: {type: \"string\", value: \"checklist-vh\"},\n                    for: {type: \"string\", value: \"checklist-new\"}\n                },\n                children: [\n                    {type: \"text\", text: \"Write a new item for the list.\"}\n                ]\n            },\n            // (pseudo) button to add the new item to the list\n            {\n                type: \"element\",\n                tag: \"button\",\n                attributes: {\n                    class: {type: \"string\", value: \"tc-btn-invisible tc-btn-mini checklist-add\"},\n                    title: {type: \"string\", value: \"add to list\"}\n                },\n                children: [\n                    {\n                        type: \"element\",\n                        tag: \"span\",\n                        attributes: {\n                            class: {type: \"string\", value: \"checklist-vh\"}\n                        },\n                        children: [\n                            {type: \"text\", text: \"add list item\"}\n                        ]\n                    }\n                ]\n            }\n            // end of button\n        ]\n    });\n\n    // Create items in a loop\n    do {\n        var startPos = this.parser.pos;\n        this.parser.pos = this.matchRegExp.lastIndex;\n        var parseResults = this.parser.wiki.parseText(\n                \"text/vnd.tiddlywiki\",\n                this.parser.source.substring(startPos + 4, this.parser.pos),\n                {parseAsInline: true});\n\n        // Use the listitem body as a label for the checkbox to get better accessibility\n        var itembody = {\n            type: \"element\",\n            tag: \"label\",\n            attributes: {\n                for: {type: \"string\", value: match.index}\n            },\n            children: parseResults.tree\n        };\n\n        var checkbox = {\n            type: \"element\",\n            tag: \"input\",\n            attributes: {\n                type: {type: \"string\", value: \"checkbox\"},\n                pos: {type: \"string\", value: match.index},\n                id: {type: \"string\", value: match.index}\n            }\n        };\n        if (match[1] === \"x\" || match[1] === \"X\") {\n            checkbox.attributes.checked = {type: \"boolean\", value: true};\n        }\n\n        // Make a button to delete the item\n        var removelabel = {\n            type: \"element\",\n            tag: \"span\",\n            attributes: {\n                class: {type: \"string\", value: \"checklist-vh\"}\n            },\n            children: [\n                {type: \"text\", text: \"delete list item\"}\n            ]\n        };\n\n        var removebutton = {\n            type: \"element\",\n            tag: \"button\",\n            attributes: {\n                class: {type: \"string\", value: \"tc-btn-invisible tc-btn-mini checklist-remove\"},\n                title: {type: \"string\", value: \"delete\"}\n            },\n            children: [\n                removelabel\n            ]\n        };\n\n        // add the item to the list\n        listItems.push({\n            type: \"element\",\n            tag: \"li\",\n            children: [\n                checkbox,\n                removebutton,\n                itembody\n            ]\n        });\n\n        match = this.matchRegExp.exec(this.parser.source);\n    } while (match != null && match.index == 1 + this.parser.pos);\n\n    if (this.shouldShowClearAll()) {\n        // show the clear-all button\n        var clearallbutton = {\n            type: \"element\",\n            tag: \"button\",\n            attributes: {\n                class: {type: \"string\", value: \"checklist-clearall\"}\n            },\n            children: [\n                {\n                    type: \"element\",\n                    tag: \"span\",\n                    attributes: {\n                        class: {type: \"string\", value: \"checklist-clearall-label\"}\n                    },\n                    children: [\n                        {type: \"text\", text: \"Clear all\"}\n                    ]\n                }\n            ]\n        };\n\n        listItems.push({\n            type: \"element\",\n            tag: \"li\",\n            children: [\n                clearallbutton\n            ]\n        });\n    }\n\n    return [{\n        type: \"checklist\",\n        attributes: {\n            listStartPos: {type: \"string\", value: listStartPos},\n            listStopPos:  {type: \"string\", value: this.parser.pos}\n        },\n        children: listItems\n    }];\n};\n\n})();\n",
            "title": "$:/plugins/tgrosinger/tw5-checklist/checkbox-wikirule.js",
            "type": "application/javascript",
            "module-type": "wikirule"
        },
        "$:/plugins/tgrosinger/tw5-checklist/checklist.js": {
            "text": "/*\\\ntitle: $:/plugins/tgrosinger/tw5-checklist/checklist.js\ntype: application/javascript\nmodule-type: widget\n\\*/\n\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar CheckListWidget = function(parseTreeNode,options) {\n    this.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nCheckListWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nCheckListWidget.prototype.render = function(parent,nextSibling) {\n    this.tiddlerTitle = this.getVariable(\"currentTiddler\");\n    this.startPos = parseInt(this.parseTreeNode.attributes.listStartPos.value);\n    this.stopPos = parseInt(this.parseTreeNode.attributes.listStopPos.value);\n\n    this.parentDomNode = parent;\n    this.nextSibling = nextSibling;\n    this.computeAttributes();\n    this.execute();\n};\n\n/*\nRetrieve the configuration state indicating if items should be re-arranged\n*/\nCheckListWidget.prototype.shouldMoveChecked = function() {\n    var configWidgetTitle = \"$:/plugins/tgrosinger/tw5-checklist/Configuration\";\n    var configWidgetFields = $tw.wiki.getTiddler(configWidgetTitle).fields;\n\n    var moveChecked = configWidgetFields[\"move-checked\"] || \"true\";\n    return (moveChecked === \"true\");\n}\n\n/*\nRetrieve the configuration state indicating if items should be re-sorted\n*/\nCheckListWidget.prototype.shouldSort= function() {\n    var configWidgetTitle = \"$:/plugins/tgrosinger/tw5-checklist/Configuration\";\n    var configWidgetFields = $tw.wiki.getTiddler(configWidgetTitle).fields;\n\n    var sort = configWidgetFields[\"sort-alphabetically\"] || \"true\";\n    return (sort === \"true\");\n}\n\n\n\n/*\nCompute the internal state of the widget\n*/\nCheckListWidget.prototype.execute = function() {\n    var domNode = this.document.createElement(\"ul\");\n    domNode.className = \"checklist\";\n\n    this.makeChildWidgets();\n    this.renderChildren(domNode);\n\n    /* add event listeners */\n    $tw.utils.each(domNode.childNodes, function(childNode) {\n        if (childNode.childNodes[0].className === \"checklist-clearall\") {\n            // ClearAllChecks, do not use checkbox listener\n            $tw.utils.addEventListeners(childNode.childNodes[0],\n                    [{name: \"click\", handlerObject: this,\n                        handlerMethod: \"handleClearChecksEvent\"}]);\n        } else if (childNode.childNodes[1].className === \"checklist-newitem\") {\n            // NewListItem, do not use checkbox listener\n            $tw.utils.addEventListeners(childNode.childNodes[1], [\n                    {name: \"blur\", handlerObject: this, handlerMethod: \"handleBlurNewItemEvent\"},\n                    {name: \"keyup\", handlerObject: this, handlerMethod: \"handleBlurNewItemEvent\"}\n            ]);\n    // If this is a normal checklist item …\n        } else {\n            if (childNode.childNodes[0].checked) {\n                $tw.utils.addEventListeners(childNode,\n                        [{name: \"change\", handlerObject: this, handlerMethod: \"handleUncheckEvent\"}]);\n            } else {\n                $tw.utils.addEventListeners(childNode,\n                        [{name: \"change\", handlerObject: this, handlerMethod: \"handleCheckEvent\"}]);\n            }\n            $tw.utils.addEventListeners(childNode.childNodes[1], [\n                {name: \"click\", handlerObject: this, handlerMethod: \"handleRemoveEvent\"}\n            ]);\n        }\n    }.bind(this));\n\n    this.parentDomNode.insertBefore(domNode, this.nextSibling);\n};\n\n// When the user clicks the clear-all button, remove all checks\nCheckListWidget.prototype.handleClearChecksEvent = function(event) {\n    var domItem = event.target.parentNode;\n    var domList = domItem.parentNode;\n\n    var tiddlerBody = $tw.wiki.getTiddler(this.tiddlerTitle).fields.text;\n    var bodyList = tiddlerBody.substring(this.startPos, this.stopPos).split(\"\\n\");\n    var bodyLen = bodyList.length;\n\n    for (var i = 0; i < bodyLen; i++) {\n        bodyList[i] = bodyList[i].replace(\"[x]\", \"[ ]\");\n        bodyList[i] = bodyList[i].replace(\"[X]\", \"[ ]\");\n    }\n\n    // Save the updated body\n    var newBody = tiddlerBody.substring(0, this.startPos) +\n                  bodyList.join(\"\\n\") +\n                  tiddlerBody.substring(this.stopPos);\n    $tw.wiki.setText(this.tiddlerTitle, \"text\", null, newBody);\n};\n\nCheckListWidget.prototype.reorderList = function(event, bodyList) {\n    var domItem = event.target.parentNode;\n    var domList = domItem.parentNode;\n    \n    var tiddlerBody = $tw.wiki.getTiddler(this.tiddlerTitle).fields.text;\n\n    // Rearrange items (if configured to do so)\n    var shouldMove = this.shouldMoveChecked();\n\n    // Sort items  (if configured to do so)\n    var shouldSort = this.shouldSort();\n\n    // These are all combinations\n    if (shouldMove) {\n        // Find the index of the first checked item\n        if (shouldSort){\n            // sort by items subject, grouping checked and unchecked\n            bodyList.sort(function (a, b) { return a.toLowerCase().localeCompare(b.toLowerCase()); });\n        }else{\n            // Order only by 3 first chars, so we have order by grouping check and unchecked \n            bodyList.sort(function (a, b) { return a.substring(0, 3).toLowerCase().localeCompare(b.substring(0, 3).toLowerCase()); });\n        }\n    }else if(shouldSort){\n        // sort by items subject\n       bodyList.sort(function (a, b) { return a.substring(3).toLowerCase().localeCompare(b.substring(3).toLowerCase()); });\n    }\n    \n    // Save the updated body\n    var newBody = tiddlerBody.substring(0, this.startPos) +\n                  bodyList.join(\"\\n\") +\n                  tiddlerBody.substring(this.stopPos);\n    $tw.wiki.setText(this.tiddlerTitle, \"text\", null, newBody);\n\n}\n\n// On blur or enter, save the new list item\nCheckListWidget.prototype.handleBlurNewItemEvent = function(event) {\n    if (event.type == \"keyup\" && event.keyCode != 13) {\n        // This function receives both blur and keyup events.\n        // Only run on blur or enter key\n        return;\n    }\n\n    if (event.target.value.trim() === \"\") {\n        // Don't save an empty list item\n        return;\n    }\n\n    var checklist = event.target.parentNode.parentNode;\n    var firstItem = checklist.childNodes[1];\n    var pos = firstItem.childNodes[0].attributes.pos.nodeValue;\n\n    var newItem = \"[ ] \" + event.target.value.trim() + \"\\n\";\n    event.target.value = \"\";\n\n    var tiddlerBody = $tw.wiki.getTiddler(this.tiddlerTitle).fields.text;\n    tiddlerBody = tiddlerBody.substring(0, pos) + newItem + tiddlerBody.substring(pos);\n    var bodyList = tiddlerBody.substring(this.startPos, this.stopPos + newItem.length).split(\"\\n\");\n    this.reorderList(event, bodyList) \n};\n\n\n\nCheckListWidget.prototype.handleChecksEvents = function(event, oldCheckState, newCheckState) {\n    var domItem = event.target.parentNode;\n    var domList = domItem.parentNode;\n    var itemIndex = [].indexOf.call(domList.childNodes, domItem) - 1;\n    \n    var tiddlerBody = $tw.wiki.getTiddler(this.tiddlerTitle).fields.text;\n    var bodyList = tiddlerBody.substring(this.startPos, this.stopPos).split(\"\\n\");\n\n    // Update the tiddler data\n    bodyList[itemIndex] = bodyList[itemIndex].replace(oldCheckState, newCheckState);\n    this.reorderList(event, bodyList) \n\n}\n\nCheckListWidget.prototype.handleCheckEvent = function(event) {\n    this.handleChecksEvents(event, \"[ ]\", \"[x]\");\n};\n\nCheckListWidget.prototype.handleUncheckEvent = function(event) {\n    this.handleChecksEvents(event, \"[x]\", \"[ ]\");\n};\n\nCheckListWidget.prototype.handleRemoveEvent = function (event) {\n    var domItem = event.target.parentNode;\n    var domList = domItem.parentNode;\n    var itemIndex = [].indexOf.call(domList.childNodes, domItem) - 1;\n\n    var tiddlerBody = $tw.wiki.getTiddler(this.tiddlerTitle).fields.text;\n    var bodyList = tiddlerBody.substring(this.startPos, this.stopPos).split(\"\\n\");\n\n    // Update the tiddler data\n    bodyList.splice(itemIndex, 1);\n    var newBody = tiddlerBody.substring(0, this.startPos) +\n                  bodyList.join(\"\\n\") +\n                  tiddlerBody.substring(this.stopPos);\n    $tw.wiki.setText(this.tiddlerTitle, \"text\", null, newBody);\n};\n\n/*\nSelectively refreshes the widget if needed.\nReturns true if the widget or any of its children needed re-rendering\n*/\nCheckListWidget.prototype.refresh = function(changedTiddlers) {\n    var changedAttributes = this.computeAttributes();\n    // Refresh if an attribute has changed, or the type associated with\n    // the target tiddler has changed\n    if(changedAttributes.tiddler || changedAttributes.field || changedAttributes.index ||\n            (changedTiddlers[this.editTitle] && this.getEditorType() !== this.editorType)) {\n        this.refreshSelf();\n        return true;\n    } else {\n        return this.refreshChildren(changedTiddlers);\n    }\n};\n\nexports.checklist = CheckListWidget;\n\n})();\n",
            "title": "$:/plugins/tgrosinger/tw5-checklist/checklist.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/tgrosinger/tw5-checklist/Configuration": {
            "title": "$:/plugins/tgrosinger/tw5-checklist/Configuration",
            "move-checked": "true",
            "strike-checked": "true",
            "show-clearall": "true",
            "sort-alphabetically": "false",
            "text": "Please see the [[homepage|https://grosinger.net/tw5-checklist/]] for more information on the options.\n\nSave and reload the wiki to activate changes.\n\n<table>\n  <tr>\n    <th align=\"left\">Rearrange checked items:</th>\n    <td>\n        <$checkbox field=\"move-checked\" tiddler=\"$:/plugins/tgrosinger/tw5-checklist/Configuration\"\n            checked=\"true\" unchecked=\"false\" default=\"true\"></$checkbox>\n    </td>\n  </tr>\n  <tr>\n    <th align=\"left\" class=\"rerendering-required\">Strike checked items: </th>\n    <td>\n        <$checkbox field=\"strike-checked\" tiddler=\"$:/plugins/tgrosinger/tw5-checklist/Configuration\"\n            checked=\"true\" unchecked=\"false\" default=\"true\"></$checkbox>\n    </td>\n  </tr>\n  <tr>\n    <th align=\"left\" class=\"rerendering-required\">Sort list alphabetically: </th>\n    <td>\n        <$checkbox field=\"sort-alphabetically\" tiddler=\"$:/plugins/tgrosinger/tw5-checklist/Configuration\"\n            checked=\"true\" unchecked=\"false\" default=\"false\"></$checkbox>\n    </td>\n  </tr>\n  <tr>\n    <th align=\"left\" class=\"rerendering-required\">Show Clear-All: </th>\n    <td>\n        <$checkbox field=\"show-clearall\" tiddler=\"$:/plugins/tgrosinger/tw5-checklist/Configuration\"\n            checked=\"true\" unchecked=\"false\" default=\"true\"></$checkbox>\n    </td>\n  </tr>\n</table>\n\n&#42; make a change in a list to see the effect (check/uncheck or add/delete an item).\n\n<style>\n.rerendering-required:after {\n    content: ' *';\n    color: #e32;\n}\n</style>\n"
        },
        "$:/plugins/tgrosinger/tw5-checklist/license": {
            "title": "$:/plugins/tgrosinger/tw5-checklist/license",
            "text": "The MIT License (MIT)\n\nCopyright (c) 2015 Tony Grosinger\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        "$:/plugins/tgrosinger/tw5-checklist/readme": {
            "title": "$:/plugins/tgrosinger/tw5-checklist/readme",
            "text": "This plugin provides a simple checklist which does not create a new tiddler for\neach task. Features include:\n\n[x] Check and uncheck items\n[x] Simple, no configuration necessary\n[x] Easily editable, and easy to read in edit view\n[x] Add new list items without using edit mode\n[x] Move completed items to bottom of list\n\n[[Source code|https://github.com/tgrosinger/tw5-checklist]]\n"
        },
        "$:/plugins/tgrosinger/tw5-checklist/stylesheet": {
            "title": "$:/plugins/tgrosinger/tw5-checklist/stylesheet",
            "tags": "$:/tags/Stylesheet",
            "text": "ul.checklist {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\nul.checklist > li {\n    position: relative;\n    width: calc(100% - 1em);\n}\n\n\n/* input form */\n\n.checklist-newitem-icon::before {\n    content: \"&#x270e;\";\n}\n\ninput.checklist-newitem {\n    margin-left: 1em;\n    margin-bottom: 0.75em;\n    padding: 2px;\n    border: none;\n    border-bottom: solid 2px <<colour sidebar-tab-background>>;\n    transition: border 0.3s;\n    width: calc(100% - 2em - 20px);\n}\n\ninput:focus.checklist-newitem {\n    border-bottom: solid 2px <<colour notification-border>>;\n}\n\n\n/* placeholder text */\n\n::-webkit-input-placeholder { \n  color: #444;\n  font-style: italic;\n}\n::-moz-placeholder { \n  color: #444;\n  font-style: italic;\n}\n:-ms-input-placeholder { \n  color: #444;\n  font-style: italic;\n}\n:-moz-placeholder { \n  color: #444;\n  font-style: italic;\n}\n::placeholder {\n  color: #444;\n  font-style: italic;\n}\n\n\n/* list items content */\n\n.checklist li input[type=\"checkbox\"] {\n    vertical-align: top;\n    margin-top: 4px;\n}\n\n.checklist label {\n    display: inline-block;\n    position: relative;\n    margin-left: -1em;\n    padding-left: 0.4em;\n    left: 1.4em;\n    width: calc(100% - 2em - 20px);\n}\n\n.checklist > li:hover label, \n.checklist input[type=\"checkbox\"]:hover + button + label, \n.checklist input[type=\"checkbox\"]:focus + button + label  {\n    background-color: <<colour sidebar-tab-background>>;\n}\n\ninput:checked + .checklist-remove + label {\n    opacity: 0.5;\n}\n\n.checklist li input + .checklist-remove:hover + label,\n.checklist li input + .checklist-remove:focus + label  {\n    background-color:  rgba(255,0,0,0.25);\n    opacity: 0.8;\n    border-radius: 5px;\n}\n\n/* strike checked items only if set in user configuration */\n<$list filter=\"[[$:/plugins/tgrosinger/tw5-checklist/Configuration]field:strike-checked[true]]\">\ninput:checked + .checklist-remove + label {\n    text-decoration: line-through;\n}\n</$list>\n\n\n/* buttons */\n\nbutton.checklist-add {\n    position: relative;\n    left: 0.75em;\n    width: 18px;\n    height: 18px;\n    border-radius: 5px;\nbackground-image: url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2211%22%20height%3D%2211%22%3E%0A%3Crect%20width%3D%221%22%20height%3D%227%22%20x%3D%225%22%20y%3D%222%22%20fill%3D%22%239B9B9B%22%2F%3E%0A%3Crect%20width%3D%227%22%20height%3D%221%22%20x%3D%222%22%20y%3D%225%22%20fill%3D%22%239B9B9B%22%2F%3E%0A%3C%2Fsvg%3E');\n    background-size: 100%;\n}\n\nbutton.checklist-add:hover, button.checklist-add:focus {\n    background-color: <<colour sidebar-tab-background>>;\n}\n\nbutton.checklist-remove {\n    display: block;\n    position: absolute;\n    top: 2px;\n    right: -6px;\n    width: 18px;\n    height: 18px;\n    border-radius: 5px;\n    color: <<colour sidebar-muted-foreground>>;\nbackground-image: url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2211%22%20height%3D%2211%22%3E%0A%3Crect%20width%3D%225%22%20height%3D%221%22%20x%3D%223%22%20y%3D%225%22%20fill%3D%22%23444%22%2F%3E%0A%3C%2Fsvg%3E');\n    background-size: 100%;\n/*    background-color: <<colour sidebar-tab-background-selected>>; */\n    border: 1px solid <<colour sidebar-tab-background>>;\n}\n\nul.checklist > li:hover button.checklist-remove {\n    color: <<colour sidebar-muted-foreground-hover>>;\n}\n\nbutton.checklist-remove:hover,\nbutton.checklist-remove:focus {\n    color:  <<colour dirty-indicator>>;\n    background-color: <<colour sidebar-tab-background>>;\n}\n\nbutton.checklist-clearall {\n    margin-top: 0.75em;\n}\n\nbutton.checklist-clearall::before {\n    content: \"↻ \";\n}\n\n\n/* visualliy hidden, accessible for screen reader */\n\n.checklist-vh {\n    position: absolute !important;\n    clip: rect(1px, 1px, 1px, 1px);\n    padding:0 !important;\n    border:0 !important;\n    height: 1px !important;\n    width: 1px !important;\n    overflow: hidden;\n}\n"
        },
        "$:/plugins/tgrosinger/tw5-checklist/Usage": {
            "title": "$:/plugins/tgrosinger/tw5-checklist/Usage",
            "text": "! Creating a New Checklist\n\nThis plugin provides a wikitext rule for use in normal wikitext tiddlers. A\nchecklist is defined as two brackets with either a <kbd>space</kbd> or an\n<kbd>x</kbd> between them.\n\n```\n! My Shopping List\n\n[ ] Milk\n[ ] Eggs\n[x] Bread\n\n```\n\n!! Multiple Checklists\n\nThere is no need to declare an instance of a checklist, and you can place\nchecklist items throughout a tiddler. Each set of consecutive (single new-line\ndelimited) checklist items will be displayed as a single checklist.\n\n```\n! My first list\n\n[ ] Item 1\n[x] Item 2\n\n! My second list\n\n[x] Item 3\n[x] Item 4\n\n```\n\n!! List Item Formatting\n\nList items support any inline formatting rules. This means you can create links,\nbold, or anything else found on the\n[[Formatting in WikiText|http://tiddlywiki.com/static/Formatting%2520in%2520WikiText.html]] guide.\n\n! Configuration\n\nPlease see [[the configuration|$:/plugins/tgrosinger/tw5-checklist/Configuration]]\npage to learn about and adjust configuration options.\n"
        }
    }
}